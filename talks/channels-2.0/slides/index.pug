doctype html
html
  head
    meta(charset="utf-8")
    title Channels 2.0
    meta(name="description" content="Django Channels 2.0 in depth overview")
    meta(name="author" content="Artem Malyshev")
    meta(name="apple-mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-status-bar-style" content="black-translucent")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    link(rel="stylesheet" href="css/reveal.css")
    link(rel="stylesheet" href="css/theme/beige.css" id="theme")
    link(rel="stylesheet" href="lib/css/zenburn.css")
    script.
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    <!--[if lt IE 9]>
    script(src='lib/js/html5shiv.js')
    <![endif]-->
    style.
      .reveal section img {
          border: none;
          box-shadow: none;
      }

      .reveal section pre {
          box-shadow: none;
      }
  body
    .reveal
      .slides
        section
          h1 Channels 2.0
          h2 Artem Malyshev
          h3 @proofit404
        section
          h3 Channels 1.0
          p.fragment 3 years old design
          p.fragment no standard interface like WSGI
          p.fragment push #[i #[b everything]] over network
          p.fragment tricky deploy
          p.fragment django session abuse
        section
          h3 3 years of experience
          p 800+ commits
          p 450+ issues closed
          p 100+ contributors
          p 40+ releases
          aside.notes
            p Official django project
        section
          h3 No standard interface
          a(href="https://www.python.org/dev/peps/pep-0333/") PEP 333
          p This wide variety of choices can be a problem for new Python users, because generally speaking, their choice of web framework will limit their choice of usable web servers, and vice versa.
          aside.notes
            p Gunicorn -> Middlewares -> Django
            p Multiplexer logic needs to be implemented everywhere
            p Passing #[b reply channel] every where
        section
          h3 Push everything over network
          blockquote
            p TBH, the main reason I like microservices is that I feel like my method calls are too fast and Iâ€™d prefer to throw in some latency.
            p Aaron Patterson (@tenderlove)
            a(href="https://twitter.com/tenderlove/status/573907559871971328?ref_src=twsrc%5Etfw") March 6, 2015
          aside.notes
            p Tons of handshaking request-response traffic
            p Scaling issues
            p Redis local channel layer
        section
          h3 Tricky deploy
          img(src="pic/messy.png")
        section
          h3 For hello world
          img(src="pic/deploy1.png")
          aside.notes
            p hello world
        section
          h3 For chat
          img(src="pic/deploy2.png")
          aside.notes
            p backpressure / channels full issue
            p hardly managed throughput
            p minimum configuration is too complex
        section
          h3 Session usage
          pre.fragment
            code.hljs.python.
              @channel_session
          pre.fragment
            code.hljs.python.
              @http_session
          pre.fragment
            code.hljs.python.
              @channel_and_http_session
          pre.fragment
            code.hljs.python.
              @channel_and_http_session_user_from_http
          pre.fragment
            code.hljs.python.
              @enforce_ordering
          aside.notes
            p Latency
            p Single point of failure
            p Scaling issues
            p Used as distributed Lock
        section
          h3 Groups issues
          p.fragment Mostly used wrong
          p.fragment Exposed to user
          p.fragment Too complex to be fully implemented
          aside.notes
            p People want to check membership
            p Not used for broadcasting
            p Membership discard on last add time and message expiration
        section
          h3 asgi redis issues
          p.fragment Incomplete groups support
          p.fragment Daphne constantly pools redis
          p.fragment Does not support transparent scale
          aside.notes
            p WS cleanup mechanics does not work
            p People get costs on AWS
            p Consistent hash issues
        section
          h3 asgi rabbitmq issue
          p.fragment Have #[i #[b really]] complex implementation
          p.fragment Needs #[i #[b really]] careful production setup
          p.fragment But fully compatible with ASGI spec
          aside.notes
            p two eventloops in different threads
            p lock management in the thread unsafe library
            p production checklist is huge
        section
          h3 Channels 1.0
          p Too complex to show incoming message counter
          img(src="pic/envelop.png" style="height: 100px; width: 100px;")
        section(data-background="pic/uvicorn.png" data-background-size="contain")
          br
        section
          h3 Actual requirements
          p.fragment Send to channel from everywhere
          p.fragment Simultaneous usage of sync and async code
          p.fragment React on websocket events on another machine
          p.fragment Cross-socket and cross-process communication
          aside.notes
            p To handle stateful long living connections in the sync code
        section
          h3 Moving the line
          p.fragment Run workers and Daphne in the same process
          p.fragment Store socket state locally
          p.fragment Remove "send-to-layer" conventions
          aside.notes
            p Use threadpool for interact between sync and async
            p In memory storage instead of session backend
            p Consumers instead of raw sockets
        section
          h3 Hello world deploy
          img(src="pic/deploy3.png")
        section
          h3 Chat deploy
          img(src="pic/deploy4.png")
          aside.notes
            p busy server will have much worth performance
            p we will randomly close websockets
        section
          h3 Implementation
          p.fragment Sync <=> async bridge
          p.fragment Twisted over asyncio
          p.fragment Remove Python 2 support
          p.fragment Consumers as first class citizens
          p.fragment Routing is a consumer too
          aside.notes
            p You can write async code in your Django project
            p Modern twisted for modern days
            p Django 2.0
            p Explicit abstractions like views
            p Routing is a complex dispatching consumer
        section
          h3 Sync to async
          pre
            code.hljs.python.
              class SyncToAsync:

                  threadpool = ThreadPoolExecutor()

                  def __init__(self, func):
                      self.func = func

                  async def __call__(self, *args, **kwargs):
                      loop = asyncio.get_event_loop()
                      future = loop.run_in_executor(
                          self.threadpool,
                          partial(self.func, *args, **kwargs),
                      )
                      return await asyncio.wait_for(future)
          aside.notes
            p Turn synchronous code into awaitable
        section
          h3 Async to sync
          pre
            code.hljs.python.
              class AsyncToSync:

                  def __init__(self, awaitable):
                      self.awaitable = awaitable

                  def __call__(self, *args, **kwargs):
                      call_result = Future()
                      event_loop.call_soon_threadsafe(
                          asyncio.ensure_future,
                          wrap(self.awaitable args, kwargs),
                      )
                      call_result.result()
          aside.notes
            p Turn awaitable into synchronous code
        section
          h3 Modern Twisted
          pre
            code.hljs.python.
              @router.route("#{"/gethostbyname/<name>"}")
              async def hostname(self, request: IRequest) -> IResponse:
                  try:
                      address = await getHostName()
                  except DNSNameError:
                      request.setResponseCode(http.NOT_FOUND)
                      return "no such host"
                  except DNSLookupError:
                      request.setResponseCode(http.NOT_FOUND)
                      return "lookup error"
                  return address
        section
          h3 Consumers
          pre
            code.hljs.python.
              class AsyncChatConsumer(AsyncConsumer):

                  async def websocket_connect(self, message):

                      await self.send({
                          "type": "websocket.accept",
                      })

                      self.username = "Anonymous"

                      await self.send({
                          "type": "websocket.send",
                          "text": "[Welcome %s!]" % self.username,
                      })
          aside.notes
            p You can await from Django ORM now!
        section
          h3 Routing
          pre
            code.hljs.python.
              application = ProtocolTypeRouter({
                  "http": URLRouter([
                      url("^", DjangoViewSystem),
                  ]),
                  "websocket": URLRouter([
                      url("^chat/$", AsyncChatConsumer),
                  ]),
                  "mqtt": MqttTemperatureConsumer,
                  "email": EmailToRouter([
                      regex("@support.org", SupportTicketHandler),
                  ]),
                  "sms": SMSFromRouter([
                      phone("+1", USTextHandler),
                  ]),
              })
          aside.notes
            p SMS reply codes or whatever you want
        section
          h3 Results
          p.fragment Removes a lot of handshaking traffic
          p.fragment Groups are be hidden in the consumer
          p.fragment First steps to async Django
          aside.notes
            p No need for redis local channel implementation
            p Broadcasting usage only
        section
          h3 Links
          a(href="http://channels.readthedocs.io/en/2.0/") Channels 2.0 Docs
          br
          a(href="http://www.aeracode.org/2017/07/11/towards-channels-20/") Towards Channels 2.0
          br
          a(href="http://www.aeracode.org/2017/10/18/channels-2-october/") Channels 2: October
          br
          a(href="http://www.uvicorn.org/") Uvicorn: The lightning-fast asyncio server.
        section
          h3 To be continued
    script(src="lib/js/head.min.js")
    script(src="js/reveal.js")
    script.
      Reveal.initialize({
          controls: false,
          progress: false,
          slideNumber: true,
          history: true,
          center: true,
          transition: 'none',
          dependencies: [
              { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
              { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
              { src: 'plugin/notes/notes.js', async: true }
          ]
      });
